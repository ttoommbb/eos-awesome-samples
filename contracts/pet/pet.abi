{
  "____comment": "This file was generated by eosio-abigen. DO NOT EDIT - 2018-06-20T22:07:52",
  "version": "eosio::abi/1.0",
  "types": [{
      "new_type_name": "uuid",
      "type": "uint64"
    }
  ],
  "structs": [{
      "name": "st_pets",
      "base": "",
      "fields": [{
          "name": "id",
          "type": "uuid"
        },{
          "name": "owner",
          "type": "name"
        },{
          "name": "name",
          "type": "string"
        },{
          "name": "type",
          "type": "uint8"
        },{
          "name": "created_at",
          "type": "uint32"
        },{
          "name": "death_at",
          "type": "uint32"
        },{
          "name": "last_fed_at",
          "type": "uint32"
        },{
          "name": "last_bed_at",
          "type": "uint32"
        },{
          "name": "last_awake_at",
          "type": "uint32"
        },{
          "name": "last_play_at",
          "type": "uint32"
        },{
          "name": "last_shower_at",
          "type": "uint32"
        }
      ]
    },{
      "name": "st_account",
      "base": "",
      "fields": [{
          "name": "balance",
          "type": "asset"
        }
      ]
    },{
      "name": "st_pet_config",
      "base": "",
      "fields": [{
          "name": "last_id",
          "type": "uuid"
        },{
          "name": "creation_fee",
          "type": "asset"
        },{
          "name": "max_health",
          "type": "uint8"
        },{
          "name": "hunger_to_zero",
          "type": "uint32"
        },{
          "name": "min_hunger_interval",
          "type": "uint32"
        },{
          "name": "max_hunger_points",
          "type": "uint8"
        },{
          "name": "hunger_hp_modifier",
          "type": "uint8"
        },{
          "name": "min_awake_interval",
          "type": "uint32"
        },{
          "name": "min_sleep_period",
          "type": "uint32"
        },{
          "name": "creation_tolerance",
          "type": "uint32"
        },{
          "name": "monsters_to_activate_fee",
          "type": "uint32"
        }
      ]
    },{
      "name": "awakepet",
      "base": "",
      "fields": [{
          "name": "pet_id",
          "type": "uuid"
        }
      ]
    },{
      "name": "bedpet",
      "base": "",
      "fields": [{
          "name": "pet_id",
          "type": "uuid"
        }
      ]
    },{
      "name": "feedpet",
      "base": "",
      "fields": [{
          "name": "pet_id",
          "type": "uuid"
        }
      ]
    },{
      "name": "updatepet",
      "base": "",
      "fields": [{
          "name": "pet_id",
          "type": "uuid"
        }
      ]
    },{
      "name": "destroypet",
      "base": "",
      "fields": [{
          "name": "pet_id",
          "type": "uuid"
        }
      ]
    },{
      "name": "createpet",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "pet_name",
          "type": "string"
        }
      ]
    },{
      "name": "transfer",
      "base": "",
      "fields": [{
          "name": "sender",
          "type": "uint64"
        },{
          "name": "receiver",
          "type": "uint64"
        }
      ]
    },{
      "name": "changecrtol",
      "base": "",
      "fields": [{
          "name": "new_interval",
          "type": "uint32"
        }
      ]
    },{
      "name": "changecrfee",
      "base": "",
      "fields": [{
          "name": "new_fee",
          "type": "asset"
        }
      ]
    }
  ],
  "actions": [{
      "name": "awakepet",
      "type": "awakepet",
      "ricardian_contract": "# CONTRACT FOR pet::awakepet## ACTION NAME: awakepet\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `pet_id` (identifier of monster)* `pet_id` (identifier of monster)\n\n### Intent### Intent\nINTENT. The intent of the `{{ awakepet }}` action is to change the state of the monster with the given id from sleeping to awake. Before awaking, the monster has to have slept for at least 4 hours. The monster has to be awake for at least 8 hours.INTENT. The intent of the `{{ awakepet }}` action is to change the state of the monster with the given id from sleeping to awake. Before awaking, the monster has to have slept for at least 4 hours. The monster has to be awake for at least 8 hours.\n\n### Term### Term\nTERM. This Contract expires 8 hours after code execution.TERM. This Contract expires 8 hours after code execution.\n"
    },{
      "name": "bedpet",
      "type": "bedpet",
      "ricardian_contract": "# CONTRACT FOR pet::bedpet## ACTION NAME: bedpet\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `pet_id` (identifier of monster)* `pet_id` (identifier of monster)\n\n### Intent### Intent\nINTENT. The intent of the `{{ bedpet }}` action is to change the state of the monster with the given id from awake to sleeping. Before bringing to bed, the monster has to have been awake for at least 8 hours. The monster has to sleep for at least 4 hours.INTENT. The intent of the `{{ bedpet }}` action is to change the state of the monster with the given id from awake to sleeping. Before bringing to bed, the monster has to have been awake for at least 8 hours. The monster has to sleep for at least 4 hours.\n\n### Term### Term\nTERM. This Contract expires 4 hours after code execution.TERM. This Contract expires 4 hours after code execution.\n"
    },{
      "name": "destroypet",
      "type": "destroypet",
      "ricardian_contract": "# CONTRACT FOR pet::destroypet ## ACTION NAME: destroypet\n### Parameters\nInput parameters:\n\n* `pet_id` (identifier of monster)\n\n### Intent\nINTENT. The intent of the `{{ destroypet }}` action is to DELETE the monster with the given id from the pets table and consequently delete the monster from the owner RAM. Once it's used the pet is deleted and NOT RECOVERABLE. Use with caution.\n\n### Term\nTERM. This Contract expires after code execution.\n"
    },{
      "name": "feedpet",
      "type": "feedpet",
      "ricardian_contract": "# CONTRACT FOR pet::feedpet## ACTION NAME: feedpet\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `pet_id` (identifier of monster)* `pet_id` (identifier of monster)\n\n### Intent### Intent\nINTENT. The intent of the `{{ feedpet }}` action is to fully feed the monster with the given id. The monster needs a break of minimum 3 hours between two feedings. While feeding the monster must be alive and awake.INTENT. The intent of the `{{ feedpet }}` action is to fully feed the monster with the given id. The monster needs a break of minimum 3 hours between two feedings. While feeding the monster must be alive and awake.\n\n### Term### Term\nTERM. This Contract expires 3 hours after code execution.TERM. This Contract expires 3 hours after code execution.\n"
    },{
      "name": "updatepet",
      "type": "updatepet",
      "ricardian_contract": "# CONTRACT FOR pet::updatepet## ACTION NAME: updatepet\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `pet_id` (identifier of monster)* `pet_id` (identifier of monster)\n\n### Intent### Intent\nINTENT. The intent of the `{{ updatepet }}` action is to re-calculate the current state of the monster at the time of execution. This action can only be called by the contract owner.INTENT. The intent of the `{{ updatepet }}` action is to re-calculate the current state of the monster at the time of execution. This action can only be called by the contract owner.\n\n### Term### Term\nTERM. This Contract expires after code execution.TERM. This Contract expires after code execution.\n"
    },{
      "name": "createpet",
      "type": "createpet",
      "ricardian_contract": "# CONTRACT FOR pet::createpet## ACTION NAME: createpet\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `owner` (person initiating creation)* `owner` (person initiating creation)\n* `pet_name` (name of monster)* `pet_name` (name of monster)\n\n### Intent### Intent\nINTENT. The intent of the `{{ createpet }}` action is to create a new digital asset with a determined monster type (at the discretion of this monster shop) and transfer ownership to {{ owner }}.INTENT. The intent of the `{{ createpet }}` action is to create a new digital asset with a determined monster type (at the discretion of this monster shop) and transfer ownership to {{ owner }}.\nThe created monster has to sleep for 4 hours after creation. The {{ owner }} can only create maximum one monster every hour.The created monster has to sleep for 4 hours after creation. The {{ owner }} can only create maximum one monster every hour.\n\nAs an authorized party I {{ signer }} wish to have {{ owner }} owning the newly created monster. I understand that {{ owner }} pays for the RAM of 295kB used by the monster. Furthermore, I attest under penalty of perjury that {{ owner }} is not afraid of keeping a monster as her pet.As an authorized party I {{ signer }} wish to have {{ owner }} owning the newly created monster. I understand that {{ owner }} pays for the RAM of 295kB used by the monster. Furthermore, I attest under penalty of perjury that {{ owner }} is not afraid of keeping a monster as her pet.\n\nThe state of the monster will change over time based on the interaction with the new asset. If the monster is not cared of according to the general rules of monster keeping the monster might die. It starves to death after 20 hours.The state of the monster will change over time based on the interaction with the new asset. If the monster is not cared of according to the general rules of monster keeping the monster might die. It starves to death after 20 hours.\n\n### Term### Term\nTERM. This Contract expires 4 hours after code execution.TERM. This Contract expires 4 hours after code execution.\n"
    },{
      "name": "transfer",
      "type": "transfer",
      "ricardian_contract": "# CONTRACT FOR pet::transfer## ACTION NAME: transfer\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `sender` (sender)* `sender` (sender)\n* `receiver` (receiver)* `receiver` (receiver)\n\n### Intent### Intent\nINTENT. The intent of the `{{ transfer }}` action is to deposit or widthdraw EOS tokens to or from the monster bank.INTENT. The intent of the `{{ transfer }}` action is to deposit or widthdraw EOS tokens to or from the monster bank.\n\n### Term### Term\nTERM. This Contract expires after code execution.TERM. This Contract expires after code execution.\n"
    },{
      "name": "changecrtol",
      "type": "changecrtol",
      "ricardian_contract": "# CONTRACT FOR pet::changecrtol## ACTION NAME: changecrtol\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `new_interval` (new minimum duration between creating monsters)* `new_interval` (new minimum duration between creating monsters)\n\n### Intent### Intent\nINTENT. The intent of the `{{ changecrtol }}` action is to set the minimal interval between creating monsters to the given value. This action can only be called by the contract owner. INTENT. The intent of the `{{ changecrtol }}` action is to set the minimal interval between creating monsters to the given value. This action can only be called by the contract owner. \n\n### Term### Term\nTERM. This Contract expires after code execution.TERM. This Contract expires after code execution.\n"
    },{
      "name": "changecrfee",
      "type": "changecrfee",
      "ricardian_contract": "# CONTRACT FOR pet::changecrfee## ACTION NAME: changecrfee\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `new_fee` (new fee for monster creation)* `new_fee` (new fee for monster creation)\n\n### Intent### Intent\nINTENT. The intent of the `{{ changecrfee }}` action is to set the fee for creating a monster to the given value. This action can only be called by the contract owner. INTENT. The intent of the `{{ changecrfee }}` action is to set the fee for creating a monster to the given value. This action can only be called by the contract owner. \n\n### Term### Term\nTERM. This Contract expires after code execution.TERM. This Contract expires after code execution.\n"
    }
  ],
  "tables": [{
      "name": "pets",
      "index_type": "i64",
      "key_names": [
        "id"
      ],
      "key_types": [
        "uuid"
      ],
      "type": "st_pets"
    },{
      "name": "accounts",
      "index_type": "i64",
      "key_names": [
        "balance"
      ],
      "key_types": [
        "asset"
      ],
      "type": "st_account"
    },{
      "name": "petconfig",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "st_pet_config"
    }
  ],
  "ricardian_clauses": [{
      "id": "Warranty",
      "body": "WARRANTY. The invoker of the contract action shall uphold its Obligations under this Contract in a timely and workmanlike manner, using knowledge and recommendations for keeping and entertaining monsters.\n  \n"
    },{
      "id": "Dispute Resolution",
      "body": "DISPUTE RESOLUTION. Any controversies or disputes arising out of or relating to this Contract will be resolved by binding arbitration under the default rules set forth by the EOS.IO Blockchain. The arbitrator's award will be final, and judgment may be entered upon it by any court having proper jurisdiction. \n  \n"
    },{
      "id": "Entire Agreement",
      "body": "ENTIRE AGREEMENT. This Contract contains the entire agreement of the parties, and there are no other promises or conditions in any other agreement whether oral or written concerning the subject matter of this Contract. This Contract supersedes any prior written or oral agreements between the parties. \n\n"
    },{
      "id": "Severability",
      "body": "SEVERABILITY. If any provision of this Contract will be held to be invalid or unenforceable for any reason, the remaining provisions will continue to be valid and enforceable. If a court finds that any provision of this Contract is invalid or unenforceable, but that by limiting such provision it would become valid and enforceable, then such provision will be deemed to be written, construed, and enforced as so limited. \n\n"
    },{
      "id": "Amendment",
      "body": "AMENDMENT. This Contract may be modified or amended in writing by mutual agreement between the parties, if the writing is signed by the party obligated under the amendment. \n\n"
    },{
      "id": "Governing Law",
      "body": "GOVERNING LAW. This Contract shall be construed in accordance with the Maxims of Equity. \n\n"
    },{
      "id": "Notice",
      "body": "NOTICE. Any notice or communication required or permitted under this Contract shall be sufficiently given if published as part of the source code. \n\n"
    },{
      "id": "Waiver of Contractual Right",
      "body": "WAIVER OF CONTRACTUAL RIGHT. The failure of either party to enforce any provision of this Contract shall not be construed as a waiver or limitation of that party's right to subsequently enforce and compel strict compliance with every provision of this Contract. \n\n"
    },{
      "id": "Arbitrator's Fees to Prevailing Party",
      "body": "ARBITRATOR'S FEES TO PREVAILING PARTY. In any action arising hereunder or any separate action pertaining to the validity of this Agreement, both sides shall pay half the initial cost of arbitration, and the prevailing party shall be awarded reasonable arbitrator's fees and costs.\n  \n"
    },{
      "id": "Construction and Interpretation",
      "body": "CONSTRUCTION AND INTERPRETATION. The rule requiring construction or interpretation against the drafter is waived. The document shall be deemed as if it were drafted by both parties in a mutual effort. \n  \n"
    }
  ],
  "error_messages": [],
  "abi_extensions": []
}
